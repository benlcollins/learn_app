<div class="container-small about-page">

	<!-- MAKE ALL LINKS TO TUTORIALS OR RESOURCES WITHIN THE SITE (I.E. TO UPLEARN INFO PAGES) -->

	<h1>About uplearn</h1>

	<p>Uplearn is a place to find and share the best digital learning resources. Each day new links are added and upvoted by the community. Join our community so you can favorite resources for future reference. Or maybe you want to find and apply to jobs that interest you, or bookmark them to review later. Uplearn is a community-driven site, so please join us and contribute learning materials you have found useful.

	<p>This app was created by
	<a href="http://www.benlcullins.com/" target="_blank">Ben Collins</a> as a final project for 
	<a href="https://generalassemb.ly/education/back-end-web-development/washington-dc" target="_blank">General 
		Assembly's Back End Web Development</a> course in Washington, DC (Jan 2015 cohort).</p>

	<h1>Technology</h1>

	<h2>Introduction</h2>

	<p>This app is built using the Ruby on Rails Framework hooked up to a Postgresql database and hosted on Heroku. The front end is built using Sass and pure CSS, organized along the lines of Jonathan Snook's <a href="https://smacss.com/book/categorizing" target="_blank">SMACSS architecture</a>.</p>

	<p><a href="https://github.com/benlcollins/learn_app" target="_blank"><%= image_tag("github/GitHub-Mark-32px.png", alt: "GitHub", class: "github-logo") %>&nbsp;&nbsp;Here is the project's source code on GitHub.</a></p>

	<h2>Notes on the dev environment</h2>

	<ul>
		<li>Mac, running OS X Yosemite</li>
		<li>Tested using Chrome, Safari and Firefox</li>
		<li>Frequent use of the code inspector in Chrome (Cmd + Shift + I)</li>
		<li>Color Picker extension for Chrome, to find colors used on web pages I liked</li>
		<li>Code written in <a href="http://www.sublimetext.com/" target="_blank">Sublime Text 2</a></li>
		<li>Git version control, hosted on <a href="https://github.com/benlcullins" target="_blank">GitHub</a></li>
		<li>Markdown files read using <a href="http://25.io/mou/" target="_blank">Mou</a></li>
		<li><a href="http://spectacleapp.com/" target="_blank">Spectacle</a> for easily sizing and moving windows</li>
		<li>Terminal for commands, git, manually accessing the database</li>
		<li><a href="https://evernote.com/" target="_blank">Evernote</a> for organizing thoughts and keeping track of coding tips</li>
		<li><a href="https://slack.com/" target="_blank">Slack</a> for team communication throughout our class</li>
	</ul>

	<h2>Core Features</h2>

	<p>These are the fundamental user stories that I began with when designing this app.</p>

	<ul>
		<li>As a user, I want to see a homepage showing resources, so I can find useful ones</li>
		<li>As a user, I want the ability to register/login/logout, so I can bookmark resources</li>
		<li>As a user, I want to submit new resources to share with the community</li>
		<li>As a user, I want to click on any link to see the details page and screenshot, so I can find out more details</li>
		<li>As a user, I want Basic Search functionality, to help me find resources</li>
		<li>As a user, I want to favorite resources, so I can find them later</li>
		<li>As a user, I want to see relevant jobs, so I can find jobs I'm interested in</li>
		<li>As a user, I want to click on any job to see the details, so I can apply</li>
		<li>As a user, I want to bookmark jobs, so I can apply for them later</li>
		<li>As a user, I want to read an About page to find out what this is all about</li>
		<li>As a user, I want to see a User profile page showing activity on app, so I can learn more about that user</li>
	</ul>

	<h2>Feature wishlist (coming soon!)</h2>



	<h2>Mobile issue and other limitations</h2>

	<p>Yes, I know this site looks like a regurgitated dogs dinner in a mobile browser, and I'm well aware of that. It was built entirely on a desktop without using any front-end frameworks or themes. Aside from being a great learning experience, it was a lot of fun to put together. One of my priorities with the app is to make the front-end responsive, or, failing that, implement a responsive framework, such as <a href="http://getbootstrap.com/" target="_blank">Bootstrap</a>.</p>

	<p>There are many other shortcomings with the app, some bigger than others. The ones I'm aware of and working on include:</p>

	<ul>
		<li>If a link is submitted through the form without an "http://" or "https://", then the app thinks it is a relative links and puts a "https://uplearn.herokuapp.com/links/28/" in the html code</li>
		<li>No autofill when submitting tags</li>
		<li>No pagination on users page</li>
		<li>Only a basic Search functionality</li>
		<li>The screenshot api takes approximately 10 - 15s to create an image (which is awesome!), but it does mean that a user may click on a show page immediately after submitting a link and not see the screenshot</li>
		<li>The app is pretty slow! Whether that's my code (most likely!) or the api calls, or the free heroku hosting, I don't know but this is certainly something to address down the line</li>
		<li>...and many more than I will document soon.</li>
	</ul>

	<h2>Gems</h2>

	<p>This project uses a number of <a href="https://rubygems.org/" target="_blank">Gems</a> but I've tried to minimize the number I used to keep dependencies to a minimum and protect the app from conflict issues in the future. I'm using the following six gems:</p>

	<ul>
		<li><a href="https://rubygems.org/gems/pry-rails" target="_blank">Pry-Rails</a>: for testing during development</li>
		<li><a href="https://rubygems.org/gems/httparty" target="_blank">Httparty</a>: for calling APIs</li>
		<li><a href="https://rubygems.org/gems/devise" target="_blank">Devise</a>: for handling user authentication</li>
		<li><a href="https://rubygems.org/gems/browshot" target="_blank">Browshot</a>: service for handling the screenshot API calls</li>
		<li><a href="https://rubygems.org/gems/dotenv-rails" target="_blank">dotenv-rails</a>: for handling proprietary or sensitive data in app (e.g. an API key) and keeping hidden on GitHub</li>
		<li><a href="https://rubygems.org/gems/rails_12factor" target="_blank">rails_12factor</a>: gem from Heroku to manage the deployment of static assets when hosting with Heroku</li>
	</ul>

	<h3>Notes on using Devise Authentication Gem</h3>

	<p>I had to modify the registration to include and persist the username to database with custom registration contruller. The fullowing tutorial was extremely useful in helping me work this out: <a href="http://www.jacopretorius.net/2014/03/adding-custom-fields-to-your-devise-user-model-in-rails-4.html" target="_blank">http://www.jacopretorius.net/2014/03/adding-custom-fields-to-your-devise-user-model-in-rails-4.html</a>.</p>

	<h3>Setting up Tags</h3>

	<p>Built a separate app to test out tagging before trying to implement in main app. Considered using acts-as-taggable-on gem but decided to build my own system, as I only needed limited capability. Fullowing two tutorials were helpful:</p>
	<ul>
		<li><a href="http://www.sitepoint.com/tagging-scratch-rails/" target="_blank">http://www.sitepoint.com/tagging-scratch-rails/</a></li>
		<li><a href="http://railscasts.com/episodes/382-tagging" target="_blank">http://railscasts.com/episodes/382-tagging</a></li>
	</ul>

	<h2>APIs</h2>

	<p>This app uses three API's to get information from third parties: firstly, a screenshot grabbing API so I can display a screenshot of the tutorials, second, the github jobs API to pull jobs into the sidebar, and, thirdly, the Wordpress Gravatar API to pull in a user's avatar based off their email.</p>

	<h3>Screenshot API</h3>

	<p>I'm using an API service called <a href="https://browshot.com/" target="_blank">Browshot</a> which gives 100 free API calls per month, and is relatively cheap to bulk buy credits for additional calls.</p>

	<p>One issues is that it takes around 10 - 15s for browshot to grab the screen image, which is pretty amazing, but still means that a user can submit a link and them immediately click on it to see the details page, but no screenshot will yet render.</p>

	<p>So I've put the API call into the create method, i.e. when a user submits a link, call the API then so that the Browshot API ID is saved into the database and the image is being prepared. When a user then visits a detail page, the Browshot API ID is available from the database immediately, and the API is just called to return an existing image (or possibly queued image) and not to create a new image.</p>

	<p>A fuller sulution might incorporate a javascript snippet to test if image is ready and loads, and if not, then to keep looping through a timed call to the API (e.g. every 1 sec) until image loads. You'll see this on my future features list!</p>

	<h3>GitHub API</h3>

	<p>The GitHub job API is available to use without a key and has generous rate limits for free use. It's fairly straightforward to implement. <a href="https://jobs.github.com/api" target="_blank">Get the lowdown here</a>.</p>

	<h3>Gravatar API</h3>

	<p>This is another straightforward API which returns a user's avatar image (if it exists), when you call the API with a hashed version of the user's email. <a href="https://en.gravatar.com/site/implement/" target="_blank">Details here</a>.</p>

	<h2>Other useful resources</h2>

	<h3>Books:</h3>

	<ul>
		<li><a href="http://learn.shayhowe.com/html-css/" target="_blank">Learn HTML and CSS by Shay Howe</a> - I can't recommend this highly enough, a great introduction to front-end</li>
		<li><a href="http://www.amazon.com/Well-Grounded-Rubyist-David-Black/dp/1617291692/" target="_blank">The Well-Grounded Rubyist - David Black</a></li>
		<li>The Rails 4 Way - Obie Fernandez and Kevin Faustino</li>
	</ul>

</div>