<div class="container-small about-page">

	<!-- MAKE ALL LINKS TO TUTORIALS OR RESOURCES WITHIN THE SITE (I.E. TO UPLEARN INFO PAGES) -->

	<h1>About UpLearn</h1>

	<p>UpLearn is a place to find and share the best digital learning resources. Each day new links are added and upvoted by the community. Join us to be a part of this learning experience by posting your favorite online tutorials or resources, and favoriting ones you like for future reference.</p>

	<p>UpLearn is a community-driven site, so please respect our mission by only sharing resources that will benefit fellow users.</p>

	<p>This app was created by
	<a href="http://www.benlcollins.com/" target="_blank">Ben Collins</a> as a final project for 
	<a href="https://generalassemb.ly/education/back-end-web-development/washington-dc" target="_blank">General 
		Assembly's Back End Web Development</a> course in Washington, DC (Jan 2015 cohort).</p>

	<p>Inspiration for this site came from finding many great tutorials online and wanting a place to keep track of ones I liked and to share them with others. It helped that my browser bookmarks were also over-crowded to the point I was struggling to find things or remember why I'd bookmarked them in the first place. For a while, I tried a Google spreadsheet but found that was still a sub-standard way of curating resources I liked.</p> 

	<p>Of course, this idea of sharing links is not new. <a href="http://www.reddit.com/" target="_blank">Reddit</a> is huge, we all know that, but there are two other sites that I came across whilst building UpLearn that inspired me:</p>

	<ul>
		<li><a href="http://www.producthunt.com/" target="_blank">Product Hunt</a> - a community site built around sharing new products</li>
		<li><a href="http://www.dzone.com/links/index.html" target="_blank">DZone</a> - a site for developers to share links, which I discovered across recently</li>
	</ul>

	<h1>Technology</h1>

	<h2>Introduction</h2>

	<p>This app is built using the Ruby on Rails Framework hooked up to a PostgreSQL database and hosted on Heroku. The front end is built using Sass and pure CSS, organized along the lines of Jonathan Snook's <a href="https://smacss.com/book/categorizing" target="_blank">SMACSS architecture</a>.</p>

	<p><a href="https://github.com/benlcollins/learn_app" target="_blank"><%= image_tag("github/GitHub-Mark-32px.png", alt: "GitHub", class: "github-logo") %>&nbsp;&nbsp;Check out the project's source code on GitHub.</a></p>

	<h2>Notes on the dev environment</h2>

	<ul>
		<li>Mac, running OS X Yosemite</li>
		<li>Tested using Chrome, Safari and Firefox</li>
		<li>Frequent use of the code inspector in Chrome</li>
		<li>Color Picker extension for Chrome, to find colors on web pages I liked</li>
		<li>Code written in <a href="http://www.sublimetext.com/" target="_blank">Sublime Text 2</a></li>
		<li>Git version control, hosted on <a href="https://github.com/benlcollins" target="_blank">GitHub</a></li>
		<li>Markdown files read in <a href="http://25.io/mou/" target="_blank">Mou</a></li>
		<li><a href="http://spectacleapp.com/" target="_blank">Spectacle</a> for easily sizing and moving windows</li>
		<li>Terminal for commands, git, manually accessing the database</li>
		<li><a href="https://evernote.com/" target="_blank">Evernote</a> for organizing thoughts and keeping track of coding tips</li>
		<li><a href="https://slack.com/" target="_blank">Slack</a> for team communication throughout our class</li>
	</ul>

	<h2>Core Features</h2>

	<p>These are the fundamental user stories that I began with when designing the app:</p>

	<ul>
		<li>As a user, I want to see a homepage showing resources, so I can find useful ones.</li>
		<li>As a user, I want the ability to register/login/logout, so I can interact with the app in a way specific to me.</li>
		<li>As a user, I want to submit new resources to share with the community.</li>
		<li>As a user, I want to click on any link to see the details page and screenshot, so I can find out more about that resource.</li>
		<li>As a user, I want a Search function, to help me find resources.</li>
		<li>As a user, I want to favorite resources, so I can find them later.</li>
		<li>As a user, I want to see relevant jobs, so I can find jobs I'm interested in.</li>
		<li>As a user, I want to click on any job to see the details, so I can apply.</li>
		<li>As a user, I want to bookmark jobs, so I can apply for them later.</li>
		<li>As a user, I want to read an About page to find out what this is all about.</li>
		<li>As a user, I want to see a User profile page showing activity on app, so I can learn more about that user.</li>
	</ul>

	<h2>Feature wishlist</h2>

	<p>These are features I'm looking to implement going forward. Some I'm working on right now, some are just items on the list. Adding this functionality should address the limitations of the app that I specifically mention in the next section.</p>

	<ul>
		<li><strike>Pagination &#10003;</strike></li>
		<li><strike>Change the time shown to "shared 5 hours ago" format rather than a precise time &#10003;</strike></li>
		<li><strike>Comments for community discussion &#10003;</strike></li>
		<li>Store the screenshot images to a 3rd party, such as Amazon S3</li>
		<li>User reputation system, based off how many upvotes and favorites the user gets on the resources they have submitted</li>
		<li>Recommendation system to surface other resources that a user might find interesting</li>
		<li>Javascript to test if a screenshot image is ready, and if not, keep trying the API every couple of seconds until the image is ready</li>
		<li>Move external request for screenshots into a background process, using a library like <a href="https://github.com/resque/resque" target="_blank">Resque</a></li>
		<li>Make the front-end mobile friendly</li>
		<li>Write tests to ensure code and any changes still adhere to the desired functionality</li>
		<li>Refactor the code!</li>
	</ul>

	<h2>Mobile? And other limitations</h2>

	<p>Yes, I know this site looks like a regurgitated dogs dinner in a mobile browser, and I'm well aware of that. This first version was built without using any front-end frameworks or themes, just hand-coded HTML and CSS. Aside from being a great learning experience, it was a lot of fun to put together. One of my priorities with the app is to make the front-end responsive, or, failing that, implement a responsive framework, such as <a href="http://getbootstrap.com/" target="_blank">Bootstrap</a>.</p>

	<p>There are many other shortcomings with the app, some bigger than others. The ones I'm aware of and working on include:</p>

	<ul>
		<li><strike>Fix the N + 1 problem: reducing calls to database when rendering index page &#10003;</strike>
			<a href="http://www.benlcollins.com/sql/fixing-the-n1-problem-in-my-rails-application/" target="_blank">details here</a>
		</li>
		<li><strike>Dealing with "http://" or "https://" missing from submitted link, by checking for this and prepending to link if not there &#10003;</strike></li>
		<li>No gatekeeper system to prevent abusive links (spammy links) being submitted.</li>
		<li>No autofill when submitting tags.</li>
		<li>Only a very basic Search functionality.</li>
		<li>Implement caching, specifically to reduce the API calls, so that I can speed up page load times.</li>
		<li>The screenshot api (which is awesome!) takes approximately 10 - 15s to create an image, but it does mean that a user may click on a show page immediately after submitting a link and not see the screenshot.</li>
		<li>...and many more that I haven't found yet!</li>
	</ul>

	<h2>Gems</h2>

	<p>This project uses a number of <a href="https://rubygems.org/" target="_blank">Gems</a> but I've tried to not go crazy here to keep dependencies to a minimum and protect the app from conflict issues in the future. In addition to those that Rails ships with, I'm using the following gems:</p>

	<ul>
		<li><a href="https://rubygems.org/gems/pry-rails" target="_blank">Pry-Rails</a>: for testing during development</li>
		<li><a href="https://rubygems.org/gems/httparty" target="_blank">Httparty</a>: for calling APIs</li>
		<li><a href="https://rubygems.org/gems/devise" target="_blank">Devise</a>: for handling user authentication</li>
		<li><a href="https://rubygems.org/gems/browshot" target="_blank">Browshot</a>: service for handling the screenshot API calls</li>
		<li><a href="https://rubygems.org/gems/kaminari/" target="_blank">Kaminari</a>: for handling pagination in the app</li>
		<li><a href="https://rubygems.org/gems/closure_tree/" target="_blank">Closure_tree</a>: for handling the nesting of comments</li>
		<li><a href="https://rubygems.org/gems/dotenv-rails" target="_blank">dotenv-rails</a>: for handling proprietary or sensitive data in app (e.g. an API key) and keeping hidden on GitHub</li>
		<li><a href="https://rubygems.org/gems/rails_12factor" target="_blank">rails_12factor</a>: gem from Heroku to manage the deployment of static assets when hosting with Heroku</li>
	</ul>

	<h3>Notes on using Devise Authentication Gem</h3>

	<p>I had to modify the registration to include and persist the username to the database with a custom registration controller. The following tutorial was extremely useful in helping me work this out: <a href="http://www.jacopretorius.net/2014/03/adding-custom-fields-to-your-devise-user-model-in-rails-4.html" target="_blank">Adding custom fields to your devise user model in rails</a>.</p>

	<h3>Notes on using Kaminari Gem</h3>

	<p>I used the Kaminari gem (which is an engine like Devise, i.e. a rails sub-application) to handle pagination, and made the following customizations:</p>

	<ul>
		<li>changed the default wording in the en.yml file in locales</li>
		<li>in the _paginator helper, commented out pieces I didn’t want, to only leave "Previous" and "Next" buttons</li>
		<li>used CSS to format these buttons, had to change the “span” to “div” in the relevant partials</li>
	</ul>

	<p>The following tutorial was also very helpful: <a href="http://railscasts.com/episodes/254-pagination-with-kaminari" target="_blank">Pagination with kaminari</a>.</p>

	<p>There is also great info in the <a href="https://github.com/amatsuda/kaminari" target="_blank">Kaminari source code pages on GitHub</a>.</p>

	<h3>Notes on using the closure_tree gem</h3>

	<p>Implementing the comments system was undoubtedly the most challenging part of the app build. There were essentially two phases: 1. build a comments model to add and show new comments (requiring a controller with "new" and "create" actions); and, 2. add the closure_tree to be able to show replies as nested comments belonging to a parent comment.</p>

	<p>I would not have been able to do this without the following tutorial: <a href="http://www.sitepoint.com/nested-comments-rails/" target="_blank">Nested Comments with Rails</a>.</p>

	<p>I followed the tutorial first time through, then I built a second app where the comments were attached to a particular link, so the comment model had a "link_id" attribute. Some considerations:</p>

	<ul>
		<li>Within the comment.rb model, a comment belongs_to a user and belongs_to a link.</li>
		<li>Within the links.rb model, a link has_many comments.</li>
		<li>Within the user.rb model, a user has_many comments.</li>
		<li>Calling Comment.hash_tree returns an ordered hash of nested hashes (the comments). So, to get comments for a specific link, I had to use an additional ".select" method to isolate them and only pass the relevant comments through to the link show page.</li>
	</ul>

	<h3>Setting up Tags</h3>

	<p>I built a separate app to test out tagging before trying to implement it in the main app. I considered two possible routes: firstly, using acts-as-taggable-on gem, or secondly making a very simple version myself. I decided on the latter, as I only needed limited capability. These two tutorials were very helpful in showing how to do this:</p>
	<ul>
		<li><a href="http://www.sitepoint.com/tagging-scratch-rails/" target="_blank">Tagging from scratch in rails</a></li>
		<li><a href="http://railscasts.com/episodes/382-tagging" target="_blank">Railscast episode 382 on tagging</a></li>
	</ul>

	<h2>APIs</h2>

	<p>This app uses three API's to get information from third parties: firstly, a screenshot grabbing API so I can display a screenshot of the tutorials; secondly, the GitHub jobs API to pull jobs into the sidebar; and, thirdly, the Wordpress Gravatar API to pull in a user's avatar based off their email.</p>

	<h3>Screenshot API</h3>

	<p>I'm using an API service called <a href="https://browshot.com/" target="_blank">Browshot</a> which gives 100 free API calls per month, and is relatively cheap to bulk buy credits for additional calls.</p>

	<p>One issues is that it takes around 10 - 15s for browshot to grab the screen image, which is pretty amazing, but still means that a user can submit a link and them immediately click to see the details page, but no screenshot image will show.</p>

	<p>So I put the API call into the create method, so when a user submits a link, the call to the API is made then so that the Browshot ID is saved into the database immediately and the image is being prepared. When a user then visits a detail page, the Browshot ID is available from the database immediately, and the API is just called to return an existing image (or possibly queued image) and not to create a new image.</p>

	<p>A fuller sulution might incorporate a javascript snippet to test if the image is ready and loads, and if not, then to keep looping through a timed call to the API (e.g. every 1 sec) until image loads.</p>

	<h3>GitHub API</h3>

	<p>The GitHub job API is available to use without a key and has generous rate limits for free use. It's fairly straightforward to implement. <a href="https://jobs.github.com/api" target="_blank">Get the lowdown here</a>.</p>

	<h3>Gravatar API</h3>

	<p>This is another straightforward API which returns a user's avatar image (if it exists), when you call the API with a hashed version of the user's email. <a href="https://en.gravatar.com/site/implement/" target="_blank">Details here</a>.</p>

	<h2>Other useful resources</h2>

	<h3>Icons:</h3>

	<p>It turns out trying to create icons in Paintbrush is a bit of disaster, so I only used one in the end: the triangle icon for the upvote button. I got it <a href="http://www.flaticon.com/free-icon/up-arrow_7645" target="
		_blank">here</a> from Flat Icon.</p>

	<h3>Books:</h3>

	<ul>
		<li><a href="http://learn.shayhowe.com/html-css/" target="_blank">Learn HTML and CSS by Shay Howe</a> - I can't recommend this highly enough, a great introduction to front-end</li>
		<li><a href="http://www.amazon.com/Well-Grounded-Rubyist-David-Black/dp/1617291692/" target="_blank">The Well-Grounded Rubyist - David Black</a></li>
	</ul>

	<h2>Contact</h2>

	<p>Questions?</p>

	<p>Find me on <a href="https://github.com/benlcollins" target="_blank">Github</a>, <a href="https://twitter.com/benlcollins" target="_blank">Twitter</a> and <a href="https://www.linkedin.com/in/benlcollins" target="_blank">Linkedin</a>.</p>

	<p>Or get in touch by email at: benlcollins [at] gmail.com</p>

</div>